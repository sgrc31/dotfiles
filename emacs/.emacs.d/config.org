#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* Intro
Second attempt at a literate emacs configuration. The core parts are taken from [[https://github.com/the-programmers-hangout/emacs][The programmers hangout config file]], with some addition (mostly graphical ones) from [[https://github.com/hlissner/doom-emacs][Doom Emacs]] 


* Keep customize settings in their custom file
  I like to have my init.el clean, and save all the variables added by Customize in another file
  
  #+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file) (load custom-file 'noerror))
  #+end_src


* Package Archives

  All of the third-party packages we’re going to reference are available through [[https://melpa.org/][MELPA]]. This is your one stop shop for finding and installing Emacs addons. Run =M-x list-packages= to bring up an interactive searchable list. When the point is over a package line, hit =i= to mark the package for installation, then =x= to install all marked packages. If packages have updates, mark them all with `U`.

  #+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  #+end_src

  Set up all the archive sources to pull from packages from.

  #+begin_src emacs-lisp
  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))

  (package-initialize)
  #+end_src


* Package Installers

  The primary tool we use to configure our Emacs packages, aptly called [[https://jwiegley.github.io/use-package/][use-package]], automatically downloads packages from a package source, speeds up startup by deferring package loading until necessary, and helps keep your configuration tidy by providing a place to combine package-specific settings and other mode and action hooks.

  #+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  ;; Yes, it's a bit meta...
  (use-package use-package
    :config
    (setq-default use-package-always-defer t
                  use-package-always-demand nil
                  use-package-always-ensure t
                  use-package-verbose t))

  (setq-default byte-compile-warnings nil)
  #+end_src


* Ivy
Replace Ido (the default) with ivy completion mode, for a faster, leaner, more customizable alternative

#+begin_src emacs-lisp
(use-package ivy
  :demand
  :config
  (ivy-mode 1))
#+end_src


* Projects

  - https://github.com/bbatsov/projectile
  - https://www.projectile.mx/en/latest/

  Projectile gives Emacs project management features, such as navigating files, finding occurences of a string, running build commands and more.
  It detects project folders through version control (git, svn, ...) and you can optionally give a default project folder path within the config.

  #+begin_src emacs-lisp
  (use-package projectile
    ;; Getting complaints about undefined variables when these are placed in
    ;; `:custom`.
    :config
    ;; Useful for any CMake-based project, and using `ccls` with C/C++
    (setq projectile-project-root-files-top-down-recurring
     (append
      '("compile_commands.json" ".ccls")
      projectile-project-root-files-top-down-recurring))
    (setq projectile-globally-ignored-directories
     (append
      '("build" "CMakeFiles" ".ccls-cache")
      projectile-globally-ignored-directories))
    (setq projectile-globally-ignored-files
     (append
      '("cmake_install.cmake")
      projectile-globally-ignored-files))
    (setq projectile-completion-system 'ivy)
    :custom
    (projectile-project-search-path '("~/lab/"))
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-sort-order 'access-time)
    :init
    (projectile-mode))
  #+end_src


** Customizations
- added default project search path
- added integration with Ivy


* Magit

  [[https://github.com/magit/magit][Magit]] is a Git interface, just like you have in many IDEs and text editors, but combining that with all the power of using Git from the command line.

  #+begin_src emacs-lisp
  (use-package magit)
  #+end_src


** TODO Forges integration
Using the forge plugin integrates magit with the most popular git forges out there (such as Github, Gitlab and so on). It might be worth using it.


* Key bindings

  [[https://github.com/justbur/emacs-which-key][Which-key]] is a package that displays what bindings are available when you start pressing a key. It is incredibly useful, especially when you are new to Emacs or when you are trying a new package.

  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
  #+END_SRC


* Linters

  The two main frameworks that allow Emacs to interface with external linters are
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html][flymake]]
  - [[https://www.flycheck.org/en/latest/][flycheck]]
  A detailed comparison is at https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html. We choose to use flycheck due to the sheer number of extensions written for it; pick your favorite language linter, and there’s probably a flycheck extension for it. Note that [[https://www.flycheck.org/en/latest/user/installation.html#windows-support][Windows isn't supported]].

  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :hook (after-init . global-flycheck-mode)
    :custom
    (flycheck-check-syntax-automatically '(save mode-enabled)))
  #+END_SRC
* Documentation

  When the point is overlapping with a function call, eldoc shows the function arguments in the echo area.

  #+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :hook (after-init . global-eldoc-mode))
  #+END_SRC


* Language and debug servers

  [[https://microsoft.github.io/language-server-protocol][LSP]] is a protocol used to implement IDE-like features in an editor-agnostic manner. This package will give us a uniform way to add features such as semantic highlighting, auto-completion, jump-to-definition, and so on.

  #+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :custom
    (lsp-auto-guess-root t)
    (lsp-log-io t)
    (lsp-prefer-flymake nil)
    (lsp-enable-snippet t))
  #+END_SRC

  This package enhances the user interface, providing pop-up windows with documentation and visual indicators.

  #+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-delay 1.0)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-flycheck-enable t)
    (lsp-ui-peek-always-show t))
  #+END_SRC

  Analogous to LSP is the [[https://microsoft.github.io/debug-adapter-protocol/][debug adapter protocol]]. We use [[https://github.com/emacs-lsp/lsp-treemacs][treemacs]] for IDE-like display of errors.

  #+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))

  (use-package treemacs
    :bind (:map global-map
                ("C-x t t" . treemacs)
                ("C-x t 1" . treemacs-select-window))
    :custom
    (treemacs-resize-icons 15))

  (use-package lsp-treemacs
    :init
    (lsp-treemacs-sync-mode 1))
  #+END_SRC

* Python

   Unfortunately the Python package situation is a little confusing. There are a few older separate packages that provide a Python major mode, but we prefer the built-in one and avoid downloading a third-party one by not ensuring it. This allows us to have =use-package= configure Python mode without downloading anything.

   #+BEGIN_SRC emacs-lisp
   (use-package python
     :ensure nil
     :hook (python-mode . lsp)
     :custom
     (python-indent-guess-indent-offset-verbose nil)
     (python-fill-docstring-style 'pep-257-nn))
   #+END_SRC


** Virtual environments
   test pyvenv
   #+begin_src emacs-lisp
   (use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode 1))
   #+end_src

* Code completion

  Company is the primary package that is used for code completion, it follows a frontend/backend system. The package =company= is the frontend, it will query a certain backend based on what code you are editing, such as one provided by an active language server.

  #+BEGIN_SRC emacs-lisp
    (use-package company
      :hook (after-init . global-company-mode)
      :config
      (setq lsp-completion-provider :capf)
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.3)
      (company-tooltip-align-annotations t))
  #+END_SRC

* YASnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
#+end_src
* Ace window
Ace window provide a quick way to select wich buffer to edit. I chose to override the standard C-x o keybind and switched the standard select keys to Colemak's homerow.
#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config (setq aw-keys '(?a ?r ?s ?t ?n ?e ?i ?o ?h))
  :bind ("C-x o" . ace-window)
)
#+end_src


** TODO Change keybins using :bind and :map
As done in other packages (avy, treemacs)


* Avy
Avy is a great tool to move faster inside a buffer
#+begin_src emacs-lisp
(use-package avy
  :bind (:map global-map
              ("C-;" . avy-goto-char-2)))
#+end_src


* PDF
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t))
#+end_src

* Expand region
  Nice little tool that increases the selected region by semantic units. [[https://github.com/magnars/expand-region.el][Github repo]]
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+end_src

* All the icon
Required by Doom theme and modeline
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src


** TODO Set loading before requirements
Or set the requirements to load only after this package


* Doom theme
#+begin_src emacs-lisp
(use-package doom-themes
  :demand 
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;(doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src


* Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src


* Org mode
  Just something basic, straight outta the org manual, but in use-package syntax
#+begin_src emacs-lisp
(use-package org
  :mode ("\\.org\\'" . org-mode)
  :bind (("C-c c" . 'org-capture)
         ("C-c l" . 'org-store-link)
         ("C-c a" . 'org-agenda)))
#+end_src

* Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org/org-roam")
    (org-roam-db-location "~/.emacs.d/org-roam.db")
    (org-roam-complete-link-at-point t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-setup))
#+end_src

* Misc
** Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

** Niente toolbars
#+begin_src emacs-lisp
(tool-bar-mode -1)
;(scroll-bar-mode -1)
#+end_src

** Niente splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Time and date in modeline
#+begin_src emacs-lisp
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M %d/%m/%y")
(setq display-time-default-load-average nil)
(display-time-mode 1)
#+end_src

** Font
#+begin_src emacs-lisp
;;Questo primo comando si applica solo per i frame già esistenti.
;;Se provo a metterlo nell'init e lancio emacs come demone, quando apro il client
;;ottengo frames con caratteri minuscoli
;;(set-frame-font "Hack Nerd Font Mono:pixelsize=15:foundry=SRC:weight=normal:slant=normal:width=normal:spacing=100:scalable=true" nil t)

;;quindi in giro ho trovato questo primo suggerimento, da questo link:
;;https://emacs.stackexchange.com/questions/52063/emacsclient-gui-has-small-fonts
;;ma non va, perché la variabile default-frame-list è vuota al momento della valutazione
;;(add-to-list 'default-frame-list '(font . "Hack Nerd Font Mono:pixelsize=15:foundry=SRC:weight=normal:slant=normal:width=normal:spacing=100:scalable=true"))

;;provo questo, da:
;;https://emacs.stackexchange.com/questions/35820/opening-emacsclient-n-c-opens-a-small-frame-with-small-fonts
;;(setq default-frame-alist '(font . "Hack Nerd Font Mono:pixelsize=15:foundry=SRC:weight=normal:slant=normal:width=normal:spacing=100:scalable=true")
;; però non va.

;;leggendo meglio questo scambio:
;;https://emacs.stackexchange.com/questions/59791/font-and-frame-configuration-in-daemon-mode
;; mi pare di capire che la soluzione sia nell'ultimo hook server-after-make-frame-hook
;; ma la cosa non verrebbe eseguita nelle sessioni stand alone GUI di emacs. Insomma, mi
;; serve più emacs-fu. Per il momento mi limito a settare il tutto a mano ogni 
;;volta che apro il client, con il primo comando qui testato.
#+end_src
