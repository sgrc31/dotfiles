 #+begin_src emacs-lisp
   ;; -*- lexical-binding: t -*-
   #+end_src

** Package Archives

   All of the third-party packages we’re going to reference are available through [[https://melpa.org/][MELPA]]. This is your one stop shop for finding and installing Emacs addons. Run =M-x list-packages= to bring up an interactive searchable list. When the point is over a package line, hit =i= to mark the package for installation, then =x= to install all marked packages. If packages have updates, mark them all with `U`.

   #+begin_src emacs-lisp
   (require 'package)
   (setq package-enable-at-startup nil)
   #+end_src

   Set up all the archive sources to pull from packages from.

   #+begin_src emacs-lisp
   (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                            ("gnu" . "http://elpa.gnu.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")))

   (package-initialize)
   #+end_src

** Package Installers

   The primary tool we use to configure our Emacs packages, aptly called [[https://jwiegley.github.io/use-package/][use-package]], automatically downloads packages from a package source, speeds up startup by deferring package loading until necessary, and helps keep your configuration tidy by providing a place to combine package-specific settings and other mode and action hooks.

   #+begin_src emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (eval-when-compile
     (require 'use-package))

   ;; Yes, it's a bit meta...
   (use-package use-package
     :config
     (setq-default use-package-always-defer t
                   use-package-always-demand nil
                   use-package-always-ensure t
                   use-package-verbose t))

   (setq-default byte-compile-warnings nil)
   #+end_src


* Projects

  - https://github.com/bbatsov/projectile
  - https://www.projectile.mx/en/latest/

  Projectile gives Emacs project management features, such as navigating files, finding occurences of a string, running build commands and more.
  It detects project folders through version control (git, svn, ...) and you can optionally give a default project folder path within the config.

  #+begin_src emacs-lisp
  (use-package projectile
    ;; Getting complaints about undefined variables when these are placed in
    ;; `:custom`.
    :config
    ;; Useful for any CMake-based project, and using `ccls` with C/C++
    (setq projectile-project-root-files-top-down-recurring
     (append
      '("compile_commands.json" ".ccls")
      projectile-project-root-files-top-down-recurring))
    (setq projectile-globally-ignored-directories
     (append
      '("build" "CMakeFiles" ".ccls-cache")
      projectile-globally-ignored-directories))
    (setq projectile-globally-ignored-files
     (append
      '("cmake_install.cmake")
      projectile-globally-ignored-files))
    :custom
    (projectile-project-search-path '("~/lab/"))
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-sort-order 'access-time)
    :init
    (projectile-mode))
  #+end_src


* Magit

  [[https://github.com/magit/magit][Magit]] is a Git interface, just like you have in many IDEs and text editors, but combining that with all the power of using Git from the command line.

  #+begin_src emacs-lisp
  (use-package magit)
  #+end_src

* Key bindings

  [[https://github.com/justbur/emacs-which-key][Which-key]] is a package that displays what bindings are available when you start pressing a key. It is incredibly useful, especially when you are new to Emacs or when you are trying a new package.

  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
  #+END_SRC


* Linters

  The two main frameworks that allow Emacs to interface with external linters are
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html][flymake]]
  - [[https://www.flycheck.org/en/latest/][flycheck]]
  A detailed comparison is at https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html. We choose to use flycheck due to the sheer number of extensions written for it; pick your favorite language linter, and there’s probably a flycheck extension for it. Note that [[https://www.flycheck.org/en/latest/user/installation.html#windows-support][Windows isn't supported]].

  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :hook (after-init . global-flycheck-mode)
    :custom
    (flycheck-check-syntax-automatically '(save mode-enabled)))
  #+END_SRC


** Documentation

  When the point is overlapping with a function call, eldoc shows the function arguments in the echo area.

  #+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :hook (after-init . global-eldoc-mode))
  #+END_SRC


* Language and debug servers

  [[https://microsoft.github.io/language-server-protocol][LSP]] is a protocol used to implement IDE-like features in an editor-agnostic manner. This package will give us a uniform way to add features such as semantic highlighting, auto-completion, jump-to-definition, and so on.

  #+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :custom
    (lsp-auto-guess-root t)
    (lsp-log-io t)
    (lsp-prefer-flymake nil))
  #+END_SRC

  This package enhances the user interface, providing pop-up windows with documentation and visual indicators.

  #+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-delay 3.0)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-flycheck-enable t)
    (lsp-ui-peek-always-show t))
  #+END_SRC

  Analogous to LSP is the [[https://microsoft.github.io/debug-adapter-protocol/][debug adapter protocol]]. We use [[https://github.com/emacs-lsp/lsp-treemacs][treemacs]] for IDE-like display of errors.

  #+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))

  (use-package treemacs
    :bind (:map global-map
                ("C-x t t" . treemacs)
                ("C-x t 1" . treemacs-select-window))
    :custom
    (treemacs-resize-icons 15))

  (use-package lsp-treemacs
    :init
    (lsp-treemacs-sync-mode 1))
  #+END_SRC


* Code completion

  Company is the primary package that is used for code completion, it follows a frontend/backend system. The package =company= is the frontend, it will query a certain backend based on what code you are editing, such as one provided by an active language server.

  #+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :custom
    (company-tooltip-align-annotations t))

  (use-package company-lsp
    :after (company lsp-mode)
    :custom
    (company-lsp-cache-candidates t))
  #+END_SRC

** Python

   Unfortunately the Python package situation is a little confusing. There are a few older separate packages that provide a Python major mode, but we prefer the built-in one and avoid downloading a third-party one by not ensuring it. This allows us to have =use-package= configure Python mode without downloading anything.

   #+BEGIN_SRC emacs-lisp
   (use-package python
     :ensure nil
     :hook (python-mode . lsp)
     :custom
     (python-indent-guess-indent-offset-verbose nil)
     (python-fill-docstring-style 'pep-257-nn))
   #+END_SRC

   To use a language server with Python, there are two options:
   - =pyls= from [[https://github.com/palantir/python-language-server][Palantir]]: =pip install python-language-server=, and =lsp-mode= will automatically pick it up
   - =mspyls= from [[https://github.com/emacs-lsp/lsp-python-ms][Microsoft]]: see [[file:../config/python.org][here]].
   #+BEGIN_SRC emacs-lisp
   (use-package lsp-python-ms
     :after lsp-mode
     :hook (python-mode . (lambda ()
                            (require 'lsp-python-ms)
                            (lsp))))
   #+END_SRC

* mie vecchie configurazioni
** Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

** Niente toolbars
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Niente splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Ace window
#+begin_src emacs-lisp
(use-package ace-window
  :config
  (global-set-key (kbd "C-x o") 'ace-window)
  (setq aw-keys '(?a ?r ?s ?t ?n ?e ?i ?o ?h)))
#+end_src
